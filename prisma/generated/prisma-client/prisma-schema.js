"use strict";
// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/
exports.__esModule = true;
exports.typeDefs = "type AggregateFruit {\n  count: Int!\n}\n\ntype AggregatePosition {\n  count: Int!\n}\n\ntype BatchPayload {\n  count: Long!\n}\n\ntype Fruit {\n  id: ID!\n  name: String!\n  positions(where: PositionWhereInput, orderBy: PositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Position!]\n}\n\ntype FruitConnection {\n  pageInfo: PageInfo!\n  edges: [FruitEdge]!\n  aggregate: AggregateFruit!\n}\n\ninput FruitCreateInput {\n  id: ID\n  name: String!\n  positions: PositionCreateManyWithoutFruitInput\n}\n\ninput FruitCreateOneWithoutPositionsInput {\n  create: FruitCreateWithoutPositionsInput\n  connect: FruitWhereUniqueInput\n}\n\ninput FruitCreateWithoutPositionsInput {\n  id: ID\n  name: String!\n}\n\ntype FruitEdge {\n  node: Fruit!\n  cursor: String!\n}\n\nenum FruitOrderByInput {\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n}\n\ntype FruitPreviousValues {\n  id: ID!\n  name: String!\n}\n\ntype FruitSubscriptionPayload {\n  mutation: MutationType!\n  node: Fruit\n  updatedFields: [String!]\n  previousValues: FruitPreviousValues\n}\n\ninput FruitSubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: FruitWhereInput\n  AND: [FruitSubscriptionWhereInput!]\n  OR: [FruitSubscriptionWhereInput!]\n  NOT: [FruitSubscriptionWhereInput!]\n}\n\ninput FruitUpdateInput {\n  name: String\n  positions: PositionUpdateManyWithoutFruitInput\n}\n\ninput FruitUpdateManyMutationInput {\n  name: String\n}\n\ninput FruitUpdateOneRequiredWithoutPositionsInput {\n  create: FruitCreateWithoutPositionsInput\n  update: FruitUpdateWithoutPositionsDataInput\n  upsert: FruitUpsertWithoutPositionsInput\n  connect: FruitWhereUniqueInput\n}\n\ninput FruitUpdateWithoutPositionsDataInput {\n  name: String\n}\n\ninput FruitUpsertWithoutPositionsInput {\n  update: FruitUpdateWithoutPositionsDataInput!\n  create: FruitCreateWithoutPositionsInput!\n}\n\ninput FruitWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  positions_every: PositionWhereInput\n  positions_some: PositionWhereInput\n  positions_none: PositionWhereInput\n  AND: [FruitWhereInput!]\n  OR: [FruitWhereInput!]\n  NOT: [FruitWhereInput!]\n}\n\ninput FruitWhereUniqueInput {\n  id: ID\n  name: String\n}\n\nscalar Long\n\ntype Mutation {\n  createFruit(data: FruitCreateInput!): Fruit!\n  updateFruit(data: FruitUpdateInput!, where: FruitWhereUniqueInput!): Fruit\n  updateManyFruits(data: FruitUpdateManyMutationInput!, where: FruitWhereInput): BatchPayload!\n  upsertFruit(where: FruitWhereUniqueInput!, create: FruitCreateInput!, update: FruitUpdateInput!): Fruit!\n  deleteFruit(where: FruitWhereUniqueInput!): Fruit\n  deleteManyFruits(where: FruitWhereInput): BatchPayload!\n  createPosition(data: PositionCreateInput!): Position!\n  updatePosition(data: PositionUpdateInput!, where: PositionWhereUniqueInput!): Position\n  updateManyPositions(data: PositionUpdateManyMutationInput!, where: PositionWhereInput): BatchPayload!\n  upsertPosition(where: PositionWhereUniqueInput!, create: PositionCreateInput!, update: PositionUpdateInput!): Position!\n  deletePosition(where: PositionWhereUniqueInput!): Position\n  deleteManyPositions(where: PositionWhereInput): BatchPayload!\n}\n\nenum MutationType {\n  CREATED\n  UPDATED\n  DELETED\n}\n\ninterface Node {\n  id: ID!\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n  endCursor: String\n}\n\ntype Position {\n  id: ID!\n  x: Float\n  y: Float\n  fruit: Fruit!\n}\n\ntype PositionConnection {\n  pageInfo: PageInfo!\n  edges: [PositionEdge]!\n  aggregate: AggregatePosition!\n}\n\ninput PositionCreateInput {\n  id: ID\n  x: Float\n  y: Float\n  fruit: FruitCreateOneWithoutPositionsInput!\n}\n\ninput PositionCreateManyWithoutFruitInput {\n  create: [PositionCreateWithoutFruitInput!]\n  connect: [PositionWhereUniqueInput!]\n}\n\ninput PositionCreateWithoutFruitInput {\n  id: ID\n  x: Float\n  y: Float\n}\n\ntype PositionEdge {\n  node: Position!\n  cursor: String!\n}\n\nenum PositionOrderByInput {\n  id_ASC\n  id_DESC\n  x_ASC\n  x_DESC\n  y_ASC\n  y_DESC\n}\n\ntype PositionPreviousValues {\n  id: ID!\n  x: Float\n  y: Float\n}\n\ninput PositionScalarWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  x: Float\n  x_not: Float\n  x_in: [Float!]\n  x_not_in: [Float!]\n  x_lt: Float\n  x_lte: Float\n  x_gt: Float\n  x_gte: Float\n  y: Float\n  y_not: Float\n  y_in: [Float!]\n  y_not_in: [Float!]\n  y_lt: Float\n  y_lte: Float\n  y_gt: Float\n  y_gte: Float\n  AND: [PositionScalarWhereInput!]\n  OR: [PositionScalarWhereInput!]\n  NOT: [PositionScalarWhereInput!]\n}\n\ntype PositionSubscriptionPayload {\n  mutation: MutationType!\n  node: Position\n  updatedFields: [String!]\n  previousValues: PositionPreviousValues\n}\n\ninput PositionSubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: PositionWhereInput\n  AND: [PositionSubscriptionWhereInput!]\n  OR: [PositionSubscriptionWhereInput!]\n  NOT: [PositionSubscriptionWhereInput!]\n}\n\ninput PositionUpdateInput {\n  x: Float\n  y: Float\n  fruit: FruitUpdateOneRequiredWithoutPositionsInput\n}\n\ninput PositionUpdateManyDataInput {\n  x: Float\n  y: Float\n}\n\ninput PositionUpdateManyMutationInput {\n  x: Float\n  y: Float\n}\n\ninput PositionUpdateManyWithoutFruitInput {\n  create: [PositionCreateWithoutFruitInput!]\n  delete: [PositionWhereUniqueInput!]\n  connect: [PositionWhereUniqueInput!]\n  set: [PositionWhereUniqueInput!]\n  disconnect: [PositionWhereUniqueInput!]\n  update: [PositionUpdateWithWhereUniqueWithoutFruitInput!]\n  upsert: [PositionUpsertWithWhereUniqueWithoutFruitInput!]\n  deleteMany: [PositionScalarWhereInput!]\n  updateMany: [PositionUpdateManyWithWhereNestedInput!]\n}\n\ninput PositionUpdateManyWithWhereNestedInput {\n  where: PositionScalarWhereInput!\n  data: PositionUpdateManyDataInput!\n}\n\ninput PositionUpdateWithoutFruitDataInput {\n  x: Float\n  y: Float\n}\n\ninput PositionUpdateWithWhereUniqueWithoutFruitInput {\n  where: PositionWhereUniqueInput!\n  data: PositionUpdateWithoutFruitDataInput!\n}\n\ninput PositionUpsertWithWhereUniqueWithoutFruitInput {\n  where: PositionWhereUniqueInput!\n  update: PositionUpdateWithoutFruitDataInput!\n  create: PositionCreateWithoutFruitInput!\n}\n\ninput PositionWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  x: Float\n  x_not: Float\n  x_in: [Float!]\n  x_not_in: [Float!]\n  x_lt: Float\n  x_lte: Float\n  x_gt: Float\n  x_gte: Float\n  y: Float\n  y_not: Float\n  y_in: [Float!]\n  y_not_in: [Float!]\n  y_lt: Float\n  y_lte: Float\n  y_gt: Float\n  y_gte: Float\n  fruit: FruitWhereInput\n  AND: [PositionWhereInput!]\n  OR: [PositionWhereInput!]\n  NOT: [PositionWhereInput!]\n}\n\ninput PositionWhereUniqueInput {\n  id: ID\n}\n\ntype Query {\n  fruit(where: FruitWhereUniqueInput!): Fruit\n  fruits(where: FruitWhereInput, orderBy: FruitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Fruit]!\n  fruitsConnection(where: FruitWhereInput, orderBy: FruitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FruitConnection!\n  position(where: PositionWhereUniqueInput!): Position\n  positions(where: PositionWhereInput, orderBy: PositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Position]!\n  positionsConnection(where: PositionWhereInput, orderBy: PositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PositionConnection!\n  node(id: ID!): Node\n}\n\ntype Subscription {\n  fruit(where: FruitSubscriptionWhereInput): FruitSubscriptionPayload\n  position(where: PositionSubscriptionWhereInput): PositionSubscriptionPayload\n}\n";
