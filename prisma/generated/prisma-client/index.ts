// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  fruit: (where?: FruitWhereInput) => Promise<boolean>;
  position: (where?: PositionWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  fruit: (where: FruitWhereUniqueInput) => FruitNullablePromise;
  fruits: (args?: {
    where?: FruitWhereInput;
    orderBy?: FruitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Fruit>;
  fruitsConnection: (args?: {
    where?: FruitWhereInput;
    orderBy?: FruitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FruitConnectionPromise;
  position: (where: PositionWhereUniqueInput) => PositionNullablePromise;
  positions: (args?: {
    where?: PositionWhereInput;
    orderBy?: PositionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Position>;
  positionsConnection: (args?: {
    where?: PositionWhereInput;
    orderBy?: PositionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PositionConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFruit: (data: FruitCreateInput) => FruitPromise;
  updateFruit: (args: {
    data: FruitUpdateInput;
    where: FruitWhereUniqueInput;
  }) => FruitPromise;
  updateManyFruits: (args: {
    data: FruitUpdateManyMutationInput;
    where?: FruitWhereInput;
  }) => BatchPayloadPromise;
  upsertFruit: (args: {
    where: FruitWhereUniqueInput;
    create: FruitCreateInput;
    update: FruitUpdateInput;
  }) => FruitPromise;
  deleteFruit: (where: FruitWhereUniqueInput) => FruitPromise;
  deleteManyFruits: (where?: FruitWhereInput) => BatchPayloadPromise;
  createPosition: (data: PositionCreateInput) => PositionPromise;
  updatePosition: (args: {
    data: PositionUpdateInput;
    where: PositionWhereUniqueInput;
  }) => PositionPromise;
  updateManyPositions: (args: {
    data: PositionUpdateManyMutationInput;
    where?: PositionWhereInput;
  }) => BatchPayloadPromise;
  upsertPosition: (args: {
    where: PositionWhereUniqueInput;
    create: PositionCreateInput;
    update: PositionUpdateInput;
  }) => PositionPromise;
  deletePosition: (where: PositionWhereUniqueInput) => PositionPromise;
  deleteManyPositions: (where?: PositionWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  fruit: (
    where?: FruitSubscriptionWhereInput
  ) => FruitSubscriptionPayloadSubscription;
  position: (
    where?: PositionSubscriptionWhereInput
  ) => PositionSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PositionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "x_ASC"
  | "x_DESC"
  | "y_ASC"
  | "y_DESC";

export type FruitOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface PositionUpdateManyWithoutFruitInput {
  create?: Maybe<
    PositionCreateWithoutFruitInput[] | PositionCreateWithoutFruitInput
  >;
  delete?: Maybe<PositionWhereUniqueInput[] | PositionWhereUniqueInput>;
  connect?: Maybe<PositionWhereUniqueInput[] | PositionWhereUniqueInput>;
  set?: Maybe<PositionWhereUniqueInput[] | PositionWhereUniqueInput>;
  disconnect?: Maybe<PositionWhereUniqueInput[] | PositionWhereUniqueInput>;
  update?: Maybe<
    | PositionUpdateWithWhereUniqueWithoutFruitInput[]
    | PositionUpdateWithWhereUniqueWithoutFruitInput
  >;
  upsert?: Maybe<
    | PositionUpsertWithWhereUniqueWithoutFruitInput[]
    | PositionUpsertWithWhereUniqueWithoutFruitInput
  >;
  deleteMany?: Maybe<PositionScalarWhereInput[] | PositionScalarWhereInput>;
  updateMany?: Maybe<
    | PositionUpdateManyWithWhereNestedInput[]
    | PositionUpdateManyWithWhereNestedInput
  >;
}

export type FruitWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface PositionCreateInput {
  id?: Maybe<ID_Input>;
  x?: Maybe<Float>;
  y?: Maybe<Float>;
  fruit: FruitCreateOneWithoutPositionsInput;
}

export interface PositionUpdateManyWithWhereNestedInput {
  where: PositionScalarWhereInput;
  data: PositionUpdateManyDataInput;
}

export interface FruitUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface PositionUpdateWithoutFruitDataInput {
  x?: Maybe<Float>;
  y?: Maybe<Float>;
}

export interface PositionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PositionWhereInput>;
  AND?: Maybe<
    PositionSubscriptionWhereInput[] | PositionSubscriptionWhereInput
  >;
  OR?: Maybe<PositionSubscriptionWhereInput[] | PositionSubscriptionWhereInput>;
  NOT?: Maybe<
    PositionSubscriptionWhereInput[] | PositionSubscriptionWhereInput
  >;
}

export interface PositionUpdateManyMutationInput {
  x?: Maybe<Float>;
  y?: Maybe<Float>;
}

export interface FruitCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  positions?: Maybe<PositionCreateManyWithoutFruitInput>;
}

export interface FruitUpdateWithoutPositionsDataInput {
  name?: Maybe<String>;
}

export interface PositionCreateManyWithoutFruitInput {
  create?: Maybe<
    PositionCreateWithoutFruitInput[] | PositionCreateWithoutFruitInput
  >;
  connect?: Maybe<PositionWhereUniqueInput[] | PositionWhereUniqueInput>;
}

export interface PositionUpdateInput {
  x?: Maybe<Float>;
  y?: Maybe<Float>;
  fruit?: Maybe<FruitUpdateOneRequiredWithoutPositionsInput>;
}

export interface PositionCreateWithoutFruitInput {
  id?: Maybe<ID_Input>;
  x?: Maybe<Float>;
  y?: Maybe<Float>;
}

export type PositionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FruitUpdateInput {
  name?: Maybe<String>;
  positions?: Maybe<PositionUpdateManyWithoutFruitInput>;
}

export interface PositionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  x?: Maybe<Float>;
  x_not?: Maybe<Float>;
  x_in?: Maybe<Float[] | Float>;
  x_not_in?: Maybe<Float[] | Float>;
  x_lt?: Maybe<Float>;
  x_lte?: Maybe<Float>;
  x_gt?: Maybe<Float>;
  x_gte?: Maybe<Float>;
  y?: Maybe<Float>;
  y_not?: Maybe<Float>;
  y_in?: Maybe<Float[] | Float>;
  y_not_in?: Maybe<Float[] | Float>;
  y_lt?: Maybe<Float>;
  y_lte?: Maybe<Float>;
  y_gt?: Maybe<Float>;
  y_gte?: Maybe<Float>;
  fruit?: Maybe<FruitWhereInput>;
  AND?: Maybe<PositionWhereInput[] | PositionWhereInput>;
  OR?: Maybe<PositionWhereInput[] | PositionWhereInput>;
  NOT?: Maybe<PositionWhereInput[] | PositionWhereInput>;
}

export interface PositionUpdateManyDataInput {
  x?: Maybe<Float>;
  y?: Maybe<Float>;
}

export interface FruitUpsertWithoutPositionsInput {
  update: FruitUpdateWithoutPositionsDataInput;
  create: FruitCreateWithoutPositionsInput;
}

export interface PositionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  x?: Maybe<Float>;
  x_not?: Maybe<Float>;
  x_in?: Maybe<Float[] | Float>;
  x_not_in?: Maybe<Float[] | Float>;
  x_lt?: Maybe<Float>;
  x_lte?: Maybe<Float>;
  x_gt?: Maybe<Float>;
  x_gte?: Maybe<Float>;
  y?: Maybe<Float>;
  y_not?: Maybe<Float>;
  y_in?: Maybe<Float[] | Float>;
  y_not_in?: Maybe<Float[] | Float>;
  y_lt?: Maybe<Float>;
  y_lte?: Maybe<Float>;
  y_gt?: Maybe<Float>;
  y_gte?: Maybe<Float>;
  AND?: Maybe<PositionScalarWhereInput[] | PositionScalarWhereInput>;
  OR?: Maybe<PositionScalarWhereInput[] | PositionScalarWhereInput>;
  NOT?: Maybe<PositionScalarWhereInput[] | PositionScalarWhereInput>;
}

export interface PositionUpsertWithWhereUniqueWithoutFruitInput {
  where: PositionWhereUniqueInput;
  update: PositionUpdateWithoutFruitDataInput;
  create: PositionCreateWithoutFruitInput;
}

export interface FruitWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  positions_every?: Maybe<PositionWhereInput>;
  positions_some?: Maybe<PositionWhereInput>;
  positions_none?: Maybe<PositionWhereInput>;
  AND?: Maybe<FruitWhereInput[] | FruitWhereInput>;
  OR?: Maybe<FruitWhereInput[] | FruitWhereInput>;
  NOT?: Maybe<FruitWhereInput[] | FruitWhereInput>;
}

export interface PositionUpdateWithWhereUniqueWithoutFruitInput {
  where: PositionWhereUniqueInput;
  data: PositionUpdateWithoutFruitDataInput;
}

export interface FruitUpdateOneRequiredWithoutPositionsInput {
  create?: Maybe<FruitCreateWithoutPositionsInput>;
  update?: Maybe<FruitUpdateWithoutPositionsDataInput>;
  upsert?: Maybe<FruitUpsertWithoutPositionsInput>;
  connect?: Maybe<FruitWhereUniqueInput>;
}

export interface FruitSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FruitWhereInput>;
  AND?: Maybe<FruitSubscriptionWhereInput[] | FruitSubscriptionWhereInput>;
  OR?: Maybe<FruitSubscriptionWhereInput[] | FruitSubscriptionWhereInput>;
  NOT?: Maybe<FruitSubscriptionWhereInput[] | FruitSubscriptionWhereInput>;
}

export interface FruitCreateOneWithoutPositionsInput {
  create?: Maybe<FruitCreateWithoutPositionsInput>;
  connect?: Maybe<FruitWhereUniqueInput>;
}

export interface FruitCreateWithoutPositionsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface PositionPreviousValues {
  id: ID_Output;
  x?: Float;
  y?: Float;
}

export interface PositionPreviousValuesPromise
  extends Promise<PositionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  x: () => Promise<Float>;
  y: () => Promise<Float>;
}

export interface PositionPreviousValuesSubscription
  extends Promise<AsyncIterator<PositionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  x: () => Promise<AsyncIterator<Float>>;
  y: () => Promise<AsyncIterator<Float>>;
}

export interface FruitEdge {
  node: Fruit;
  cursor: String;
}

export interface FruitEdgePromise extends Promise<FruitEdge>, Fragmentable {
  node: <T = FruitPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FruitEdgeSubscription
  extends Promise<AsyncIterator<FruitEdge>>,
    Fragmentable {
  node: <T = FruitSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FruitSubscriptionPayload {
  mutation: MutationType;
  node: Fruit;
  updatedFields: String[];
  previousValues: FruitPreviousValues;
}

export interface FruitSubscriptionPayloadPromise
  extends Promise<FruitSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FruitPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FruitPreviousValuesPromise>() => T;
}

export interface FruitSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FruitSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FruitSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FruitPreviousValuesSubscription>() => T;
}

export interface FruitPreviousValues {
  id: ID_Output;
  name: String;
}

export interface FruitPreviousValuesPromise
  extends Promise<FruitPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface FruitPreviousValuesSubscription
  extends Promise<AsyncIterator<FruitPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PositionSubscriptionPayload {
  mutation: MutationType;
  node: Position;
  updatedFields: String[];
  previousValues: PositionPreviousValues;
}

export interface PositionSubscriptionPayloadPromise
  extends Promise<PositionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PositionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PositionPreviousValuesPromise>() => T;
}

export interface PositionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PositionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PositionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PositionPreviousValuesSubscription>() => T;
}

export interface Position {
  id: ID_Output;
  x?: Float;
  y?: Float;
}

export interface PositionPromise extends Promise<Position>, Fragmentable {
  id: () => Promise<ID_Output>;
  x: () => Promise<Float>;
  y: () => Promise<Float>;
  fruit: <T = FruitPromise>() => T;
}

export interface PositionSubscription
  extends Promise<AsyncIterator<Position>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  x: () => Promise<AsyncIterator<Float>>;
  y: () => Promise<AsyncIterator<Float>>;
  fruit: <T = FruitSubscription>() => T;
}

export interface PositionNullablePromise
  extends Promise<Position | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  x: () => Promise<Float>;
  y: () => Promise<Float>;
  fruit: <T = FruitPromise>() => T;
}

export interface Fruit {
  id: ID_Output;
  name: String;
}

export interface FruitPromise extends Promise<Fruit>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  positions: <T = FragmentableArray<Position>>(args?: {
    where?: PositionWhereInput;
    orderBy?: PositionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FruitSubscription
  extends Promise<AsyncIterator<Fruit>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  positions: <T = Promise<AsyncIterator<PositionSubscription>>>(args?: {
    where?: PositionWhereInput;
    orderBy?: PositionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FruitNullablePromise
  extends Promise<Fruit | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  positions: <T = FragmentableArray<Position>>(args?: {
    where?: PositionWhereInput;
    orderBy?: PositionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FruitConnection {
  pageInfo: PageInfo;
  edges: FruitEdge[];
}

export interface FruitConnectionPromise
  extends Promise<FruitConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FruitEdge>>() => T;
  aggregate: <T = AggregateFruitPromise>() => T;
}

export interface FruitConnectionSubscription
  extends Promise<AsyncIterator<FruitConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FruitEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFruitSubscription>() => T;
}

export interface AggregatePosition {
  count: Int;
}

export interface AggregatePositionPromise
  extends Promise<AggregatePosition>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePositionSubscription
  extends Promise<AsyncIterator<AggregatePosition>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PositionEdge {
  node: Position;
  cursor: String;
}

export interface PositionEdgePromise
  extends Promise<PositionEdge>,
    Fragmentable {
  node: <T = PositionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PositionEdgeSubscription
  extends Promise<AsyncIterator<PositionEdge>>,
    Fragmentable {
  node: <T = PositionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateFruit {
  count: Int;
}

export interface AggregateFruitPromise
  extends Promise<AggregateFruit>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFruitSubscription
  extends Promise<AsyncIterator<AggregateFruit>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PositionConnection {
  pageInfo: PageInfo;
  edges: PositionEdge[];
}

export interface PositionConnectionPromise
  extends Promise<PositionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PositionEdge>>() => T;
  aggregate: <T = AggregatePositionPromise>() => T;
}

export interface PositionConnectionSubscription
  extends Promise<AsyncIterator<PositionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PositionEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePositionSubscription>() => T;
}

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Fruit",
    embedded: false
  },
  {
    name: "Position",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/joseangel/plotti-frutti/dev`
});
export const prisma = new Prisma();
