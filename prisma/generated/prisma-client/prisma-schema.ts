// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateFruit {
  count: Int!
}

type AggregatePosition {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Fruit {
  id: ID!
  name: String!
  positions(where: PositionWhereInput, orderBy: PositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Position!]
}

type FruitConnection {
  pageInfo: PageInfo!
  edges: [FruitEdge]!
  aggregate: AggregateFruit!
}

input FruitCreateInput {
  id: ID
  name: String!
  positions: PositionCreateManyWithoutFruitInput
}

input FruitCreateOneWithoutPositionsInput {
  create: FruitCreateWithoutPositionsInput
  connect: FruitWhereUniqueInput
}

input FruitCreateWithoutPositionsInput {
  id: ID
  name: String!
}

type FruitEdge {
  node: Fruit!
  cursor: String!
}

enum FruitOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type FruitPreviousValues {
  id: ID!
  name: String!
}

type FruitSubscriptionPayload {
  mutation: MutationType!
  node: Fruit
  updatedFields: [String!]
  previousValues: FruitPreviousValues
}

input FruitSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FruitWhereInput
  AND: [FruitSubscriptionWhereInput!]
  OR: [FruitSubscriptionWhereInput!]
  NOT: [FruitSubscriptionWhereInput!]
}

input FruitUpdateInput {
  name: String
  positions: PositionUpdateManyWithoutFruitInput
}

input FruitUpdateManyMutationInput {
  name: String
}

input FruitUpdateOneRequiredWithoutPositionsInput {
  create: FruitCreateWithoutPositionsInput
  update: FruitUpdateWithoutPositionsDataInput
  upsert: FruitUpsertWithoutPositionsInput
  connect: FruitWhereUniqueInput
}

input FruitUpdateWithoutPositionsDataInput {
  name: String
}

input FruitUpsertWithoutPositionsInput {
  update: FruitUpdateWithoutPositionsDataInput!
  create: FruitCreateWithoutPositionsInput!
}

input FruitWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  positions_every: PositionWhereInput
  positions_some: PositionWhereInput
  positions_none: PositionWhereInput
  AND: [FruitWhereInput!]
  OR: [FruitWhereInput!]
  NOT: [FruitWhereInput!]
}

input FruitWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Mutation {
  createFruit(data: FruitCreateInput!): Fruit!
  updateFruit(data: FruitUpdateInput!, where: FruitWhereUniqueInput!): Fruit
  updateManyFruits(data: FruitUpdateManyMutationInput!, where: FruitWhereInput): BatchPayload!
  upsertFruit(where: FruitWhereUniqueInput!, create: FruitCreateInput!, update: FruitUpdateInput!): Fruit!
  deleteFruit(where: FruitWhereUniqueInput!): Fruit
  deleteManyFruits(where: FruitWhereInput): BatchPayload!
  createPosition(data: PositionCreateInput!): Position!
  updatePosition(data: PositionUpdateInput!, where: PositionWhereUniqueInput!): Position
  updateManyPositions(data: PositionUpdateManyMutationInput!, where: PositionWhereInput): BatchPayload!
  upsertPosition(where: PositionWhereUniqueInput!, create: PositionCreateInput!, update: PositionUpdateInput!): Position!
  deletePosition(where: PositionWhereUniqueInput!): Position
  deleteManyPositions(where: PositionWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Position {
  id: ID!
  x: Float
  y: Float
  fruit: Fruit!
}

type PositionConnection {
  pageInfo: PageInfo!
  edges: [PositionEdge]!
  aggregate: AggregatePosition!
}

input PositionCreateInput {
  id: ID
  x: Float
  y: Float
  fruit: FruitCreateOneWithoutPositionsInput!
}

input PositionCreateManyWithoutFruitInput {
  create: [PositionCreateWithoutFruitInput!]
  connect: [PositionWhereUniqueInput!]
}

input PositionCreateWithoutFruitInput {
  id: ID
  x: Float
  y: Float
}

type PositionEdge {
  node: Position!
  cursor: String!
}

enum PositionOrderByInput {
  id_ASC
  id_DESC
  x_ASC
  x_DESC
  y_ASC
  y_DESC
}

type PositionPreviousValues {
  id: ID!
  x: Float
  y: Float
}

input PositionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  x: Float
  x_not: Float
  x_in: [Float!]
  x_not_in: [Float!]
  x_lt: Float
  x_lte: Float
  x_gt: Float
  x_gte: Float
  y: Float
  y_not: Float
  y_in: [Float!]
  y_not_in: [Float!]
  y_lt: Float
  y_lte: Float
  y_gt: Float
  y_gte: Float
  AND: [PositionScalarWhereInput!]
  OR: [PositionScalarWhereInput!]
  NOT: [PositionScalarWhereInput!]
}

type PositionSubscriptionPayload {
  mutation: MutationType!
  node: Position
  updatedFields: [String!]
  previousValues: PositionPreviousValues
}

input PositionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PositionWhereInput
  AND: [PositionSubscriptionWhereInput!]
  OR: [PositionSubscriptionWhereInput!]
  NOT: [PositionSubscriptionWhereInput!]
}

input PositionUpdateInput {
  x: Float
  y: Float
  fruit: FruitUpdateOneRequiredWithoutPositionsInput
}

input PositionUpdateManyDataInput {
  x: Float
  y: Float
}

input PositionUpdateManyMutationInput {
  x: Float
  y: Float
}

input PositionUpdateManyWithoutFruitInput {
  create: [PositionCreateWithoutFruitInput!]
  delete: [PositionWhereUniqueInput!]
  connect: [PositionWhereUniqueInput!]
  set: [PositionWhereUniqueInput!]
  disconnect: [PositionWhereUniqueInput!]
  update: [PositionUpdateWithWhereUniqueWithoutFruitInput!]
  upsert: [PositionUpsertWithWhereUniqueWithoutFruitInput!]
  deleteMany: [PositionScalarWhereInput!]
  updateMany: [PositionUpdateManyWithWhereNestedInput!]
}

input PositionUpdateManyWithWhereNestedInput {
  where: PositionScalarWhereInput!
  data: PositionUpdateManyDataInput!
}

input PositionUpdateWithoutFruitDataInput {
  x: Float
  y: Float
}

input PositionUpdateWithWhereUniqueWithoutFruitInput {
  where: PositionWhereUniqueInput!
  data: PositionUpdateWithoutFruitDataInput!
}

input PositionUpsertWithWhereUniqueWithoutFruitInput {
  where: PositionWhereUniqueInput!
  update: PositionUpdateWithoutFruitDataInput!
  create: PositionCreateWithoutFruitInput!
}

input PositionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  x: Float
  x_not: Float
  x_in: [Float!]
  x_not_in: [Float!]
  x_lt: Float
  x_lte: Float
  x_gt: Float
  x_gte: Float
  y: Float
  y_not: Float
  y_in: [Float!]
  y_not_in: [Float!]
  y_lt: Float
  y_lte: Float
  y_gt: Float
  y_gte: Float
  fruit: FruitWhereInput
  AND: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  NOT: [PositionWhereInput!]
}

input PositionWhereUniqueInput {
  id: ID
}

type Query {
  fruit(where: FruitWhereUniqueInput!): Fruit
  fruits(where: FruitWhereInput, orderBy: FruitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Fruit]!
  fruitsConnection(where: FruitWhereInput, orderBy: FruitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FruitConnection!
  position(where: PositionWhereUniqueInput!): Position
  positions(where: PositionWhereInput, orderBy: PositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Position]!
  positionsConnection(where: PositionWhereInput, orderBy: PositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PositionConnection!
  node(id: ID!): Node
}

type Subscription {
  fruit(where: FruitSubscriptionWhereInput): FruitSubscriptionPayload
  position(where: PositionSubscriptionWhereInput): PositionSubscriptionPayload
}
`